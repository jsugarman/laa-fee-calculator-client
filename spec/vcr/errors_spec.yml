---
http_interactions:
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/?case_date=20181-01-01
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Date:
      - Mon, 25 Jun 2018 12:38:25 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '50'
    body:
      encoding: UTF-8
      string: '["`case_date` should be in the format YYYY-MM-DD"]'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 12:38:25 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/100/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 12:38:25 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 12:38:25 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 25 Jun 2018 13:12:28 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '357'
    body:
      encoding: UTF-8
      string: '{"count":3,"next":null,"previous":null,"results":[{"id":1,"start_date":"2012-04-01","end_date":"2018-03-31","type":"AGFS","description":"AGFS
        Fee Scheme 9"},{"id":2,"start_date":"2016-04-01","end_date":null,"type":"LGFS","description":"LGFS
        Fee Scheme 8"},{"id":3,"start_date":"2018-04-01","end_date":null,"type":"AGFS","description":"AGFS
        Fee Scheme 10"}]}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:12:28 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/advocate-types/?case_date=20181-01-01
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 25 Jun 2018 13:12:28 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '189'
    body:
      encoding: UTF-8
      string: '{"count":4,"next":null,"previous":null,"results":[{"id":"JRALONE","name":"Junior
        alone"},{"id":"LEADJR","name":"Leading junior"},{"id":"LEDJR","name":"Led
        junior"},{"id":"QC","name":"QC"}]}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:12:28 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/advocate-types/JUIOR/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 13:12:28 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:12:28 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/advocate-types/10000/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 13:15:09 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:15:09 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/advocate-types/?page=1000
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 13:38:00 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '26'
    body:
      encoding: UTF-8
      string: '{"detail":"Invalid page."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:38:00 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/fee-types/?scenario=INVALID_DATATYPE
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 500
      message: Internal Server Error
    headers:
      Date:
      - Mon, 25 Jun 2018 13:42:37 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - text/plain
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '22126'
      Vary:
      - Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:42:37 GMT
recorded_with: VCR 4.0.0
