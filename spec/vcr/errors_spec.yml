---
http_interactions:
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/?case_date=20181-01-01
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Date:
      - Mon, 25 Jun 2018 12:38:25 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '50'
    body:
      encoding: UTF-8
      string: '["`case_date` should be in the format YYYY-MM-DD"]'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 12:38:25 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/100/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 12:38:25 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 12:38:25 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 25 Jun 2018 13:12:28 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '357'
    body:
      encoding: UTF-8
      string: '{"count":3,"next":null,"previous":null,"results":[{"id":1,"start_date":"2012-04-01","end_date":"2018-03-31","type":"AGFS","description":"AGFS
        Fee Scheme 9"},{"id":2,"start_date":"2016-04-01","end_date":null,"type":"LGFS","description":"LGFS
        Fee Scheme 8"},{"id":3,"start_date":"2018-04-01","end_date":null,"type":"AGFS","description":"AGFS
        Fee Scheme 10"}]}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:12:28 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/advocate-types/?case_date=20181-01-01
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 25 Jun 2018 13:12:28 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '189'
    body:
      encoding: UTF-8
      string: '{"count":4,"next":null,"previous":null,"results":[{"id":"JRALONE","name":"Junior
        alone"},{"id":"LEADJR","name":"Leading junior"},{"id":"LEDJR","name":"Led
        junior"},{"id":"QC","name":"QC"}]}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:12:28 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/advocate-types/JUIOR/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 13:12:28 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:12:28 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/advocate-types/10000/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 13:15:09 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:15:09 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/advocate-types/?page=1000
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 13:38:00 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '26'
    body:
      encoding: UTF-8
      string: '{"detail":"Invalid page."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:38:00 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/fee-types/?scenario=INVALID_DATATYPE
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 500
      message: Internal Server Error
    headers:
      Date:
      - Mon, 25 Jun 2018 13:42:37 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - text/plain
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '22126'
      Vary:
      - Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 25 Jun 2018 13:42:37 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/fee-types/1000/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 16:10:02 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 16:10:02 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/fee-types/?scenario=100
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 25 Jun 2018 16:10:03 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '52'
    body:
      encoding: UTF-8
      string: '{"count":0,"next":null,"previous":null,"results":[]}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 16:10:03 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/units/1000/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 16:10:03 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 16:10:03 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/units/?scenario=INVALID_DATATYPE
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 500
      message: Internal Server Error
    headers:
      Date:
      - Mon, 25 Jun 2018 16:10:03 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - text/plain
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '22110'
      Vary:
      - Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 25 Jun 2018 16:10:03 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/units/?scenario=100
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 25 Jun 2018 16:10:03 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '52'
    body:
      encoding: UTF-8
      string: '{"count":0,"next":null,"previous":null,"results":[]}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 16:10:03 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/modifier-types/1000/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Mon, 25 Jun 2018 16:10:03 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '23'
    body:
      encoding: UTF-8
      string: '{"detail":"Not found."}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 16:10:03 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/modifier-types/?scenario=INVALID_DATATYPE
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 500
      message: Internal Server Error
    headers:
      Date:
      - Mon, 25 Jun 2018 16:10:03 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - text/plain
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '22146'
      Vary:
      - Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        VmFsdWVFcnJvciBhdCAvYXBpL3YxL2ZlZS1zY2hlbWVzLzEvbW9kaWZpZXItdHlwZXMvCmludmFsaWQgbGl0ZXJhbCBmb3IgaW50KCkgd2l0aCBiYXNlIDEwOiAnSU5WQUxJRF9EQVRBVFlQRScKClJlcXVlc3QgTWV0aG9kOiBHRVQKUmVxdWVzdCBVUkw6IGh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvdjEvZmVlLXNjaGVtZXMvMS9tb2RpZmllci10eXBlcy8/c2NlbmFyaW89SU5WQUxJRF9EQVRBVFlQRQpEamFuZ28gVmVyc2lvbjogMS4xMS41ClB5dGhvbiBFeGVjdXRhYmxlOiAvVXNlcnMvanN1Z2FybWFuLy5weWVudi92ZXJzaW9ucy9sYWEtZmVlLWNhbGN1bGF0b3IvYmluL3B5dGhvbgpQeXRob24gVmVyc2lvbjogMy42LjUKUHl0aG9uIFBhdGg6IFsnL1VzZXJzL2pzdWdhcm1hbi9yYWlsc19wcm9qZWN0cy9kc193b3JrL2NjY2QvbGFhLWZlZS1jYWxjdWxhdG9yL2ZlZV9jYWxjdWxhdG9yL2FwcHMnLCAnL1VzZXJzL2pzdWdhcm1hbi9yYWlsc19wcm9qZWN0cy9kc193b3JrL2NjY2QvbGFhLWZlZS1jYWxjdWxhdG9yJywgJy9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3ZlcnNpb25zLzMuNi41L2xpYi9weXRob24zNi56aXAnLCAnL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvMy42LjUvbGliL3B5dGhvbjMuNicsICcvVXNlcnMvanN1Z2FybWFuLy5weWVudi92ZXJzaW9ucy8zLjYuNS9saWIvcHl0aG9uMy42L2xpYi1keW5sb2FkJywgJy9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3ZlcnNpb25zL2xhYS1mZWUtY2FsY3VsYXRvci9saWIvcHl0aG9uMy42L3NpdGUtcGFja2FnZXMnXQpTZXJ2ZXIgdGltZTogTW9uLCAyNSBKdW4gMjAxOCAxNjoxMDowMyArMDAwMApJbnN0YWxsZWQgQXBwbGljYXRpb25zOgpbJ2RqYW5nby5jb250cmliLmFkbWluJywKICdkamFuZ28uY29udHJpYi5hdXRoJywKICdkamFuZ28uY29udHJpYi5jb250ZW50dHlwZXMnLAogJ2RqYW5nby5jb250cmliLnNlc3Npb25zJywKICdkamFuZ28uY29udHJpYi5tZXNzYWdlcycsCiAnZGphbmdvLmNvbnRyaWIuc3RhdGljZmlsZXMnLAogJ3Jlc3RfZnJhbWV3b3JrJywKICdyZXN0X2ZyYW1ld29ya19zd2FnZ2VyJywKICdtb2pfaXJhdCcsCiAnY29yc2hlYWRlcnMnLAogJ2RqYW5nb19maWx0ZXJzJywKICdhcGknLAogJ2NhbGN1bGF0b3InXQpJbnN0YWxsZWQgTWlkZGxld2FyZToKWydkamFuZ28ubWlkZGxld2FyZS5zZWN1cml0eS5TZWN1cml0eU1pZGRsZXdhcmUnLAogJ2RqYW5nby5jb250cmliLnNlc3Npb25zLm1pZGRsZXdhcmUuU2Vzc2lvbk1pZGRsZXdhcmUnLAogJ2NvcnNoZWFkZXJzLm1pZGRsZXdhcmUuQ29yc01pZGRsZXdhcmUnLAogJ2RqYW5nby5taWRkbGV3YXJlLmNvbW1vbi5Db21tb25NaWRkbGV3YXJlJywKICdkamFuZ28ubWlkZGxld2FyZS5jc3JmLkNzcmZWaWV3TWlkZGxld2FyZScsCiAnZGphbmdvLmNvbnRyaWIuYXV0aC5taWRkbGV3YXJlLkF1dGhlbnRpY2F0aW9uTWlkZGxld2FyZScsCiAnZGphbmdvLmNvbnRyaWIubWVzc2FnZXMubWlkZGxld2FyZS5NZXNzYWdlTWlkZGxld2FyZScsCiAnZGphbmdvLm1pZGRsZXdhcmUuY2xpY2tqYWNraW5nLlhGcmFtZU9wdGlvbnNNaWRkbGV3YXJlJ10KCgpUcmFjZWJhY2s6ICAKCkZpbGUgIi9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3ZlcnNpb25zL2xhYS1mZWUtY2FsY3VsYXRvci9saWIvcHl0aG9uMy42L3NpdGUtcGFja2FnZXMvZGphbmdvL2NvcmUvaGFuZGxlcnMvZXhjZXB0aW9uLnB5IiBpbiBpbm5lcgogIDQxLiAgICAgICAgICAgICByZXNwb25zZSA9IGdldF9yZXNwb25zZShyZXF1ZXN0KQoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2xpYi9weXRob24zLjYvc2l0ZS1wYWNrYWdlcy9kamFuZ28vY29yZS9oYW5kbGVycy9iYXNlLnB5IiBpbiBfZ2V0X3Jlc3BvbnNlCiAgMTg3LiAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLnByb2Nlc3NfZXhjZXB0aW9uX2J5X21pZGRsZXdhcmUoZSwgcmVxdWVzdCkKCkZpbGUgIi9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3ZlcnNpb25zL2xhYS1mZWUtY2FsY3VsYXRvci9saWIvcHl0aG9uMy42L3NpdGUtcGFja2FnZXMvZGphbmdvL2NvcmUvaGFuZGxlcnMvYmFzZS5weSIgaW4gX2dldF9yZXNwb25zZQogIDE4NS4gICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gd3JhcHBlZF9jYWxsYmFjayhyZXF1ZXN0LCAqY2FsbGJhY2tfYXJncywgKipjYWxsYmFja19rd2FyZ3MpCgpGaWxlICIvVXNlcnMvanN1Z2FybWFuLy5weWVudi92ZXJzaW9ucy9sYWEtZmVlLWNhbGN1bGF0b3IvbGliL3B5dGhvbjMuNi9zaXRlLXBhY2thZ2VzL2RqYW5nby92aWV3cy9kZWNvcmF0b3JzL2NzcmYucHkiIGluIHdyYXBwZWRfdmlldwogIDU4LiAgICAgICAgIHJldHVybiB2aWV3X2Z1bmMoKmFyZ3MsICoqa3dhcmdzKQoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2xpYi9weXRob24zLjYvc2l0ZS1wYWNrYWdlcy9yZXN0X2ZyYW1ld29yay92aWV3c2V0cy5weSIgaW4gdmlldwogIDk1LiAgICAgICAgICAgICByZXR1cm4gc2VsZi5kaXNwYXRjaChyZXF1ZXN0LCAqYXJncywgKiprd2FyZ3MpCgpGaWxlICIvVXNlcnMvanN1Z2FybWFuLy5weWVudi92ZXJzaW9ucy9sYWEtZmVlLWNhbGN1bGF0b3IvbGliL3B5dGhvbjMuNi9zaXRlLXBhY2thZ2VzL3Jlc3RfZnJhbWV3b3JrL3ZpZXdzLnB5IiBpbiBkaXNwYXRjaAogIDQ5NC4gICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLmhhbmRsZV9leGNlcHRpb24oZXhjKQoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2xpYi9weXRob24zLjYvc2l0ZS1wYWNrYWdlcy9yZXN0X2ZyYW1ld29yay92aWV3cy5weSIgaW4gaGFuZGxlX2V4Y2VwdGlvbgogIDQ1NC4gICAgICAgICAgICAgc2VsZi5yYWlzZV91bmNhdWdodF9leGNlcHRpb24oZXhjKQoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2xpYi9weXRob24zLjYvc2l0ZS1wYWNrYWdlcy9yZXN0X2ZyYW1ld29yay92aWV3cy5weSIgaW4gZGlzcGF0Y2gKICA0OTEuICAgICAgICAgICAgIHJlc3BvbnNlID0gaGFuZGxlcihyZXF1ZXN0LCAqYXJncywgKiprd2FyZ3MpCgpGaWxlICIvVXNlcnMvanN1Z2FybWFuL3JhaWxzX3Byb2plY3RzL2RzX3dvcmsvY2NjZC9sYWEtZmVlLWNhbGN1bGF0b3IvZmVlX2NhbGN1bGF0b3IvYXBwcy9jYWxjdWxhdG9yL3ZpZXdzLnB5IiBpbiBsaXN0CiAgMTA0LiAgICAgICAgIHF1ZXJ5c2V0ID0gc2VsZi5nZXRfc2NoZW1lX3F1ZXJ5c2V0KHNjaGVtZV9waykKCkZpbGUgIi9Vc2Vycy9qc3VnYXJtYW4vcmFpbHNfcHJvamVjdHMvZHNfd29yay9jY2NkL2xhYS1mZWUtY2FsY3VsYXRvci9mZWVfY2FsY3VsYXRvci9hcHBzL2NhbGN1bGF0b3Ivdmlld3MucHkiIGluIGdldF9zY2hlbWVfcXVlcnlzZXQKICAxMDEuICAgICAgICAgcmV0dXJuIHNlbGYuZmlsdGVyX3F1ZXJ5c2V0KHF1ZXJ5c2V0KQoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi9yYWlsc19wcm9qZWN0cy9kc193b3JrL2NjY2QvbGFhLWZlZS1jYWxjdWxhdG9yL2ZlZV9jYWxjdWxhdG9yL2FwcHMvY2FsY3VsYXRvci92aWV3cy5weSIgaW4gZmlsdGVyX3F1ZXJ5c2V0CiAgMTkxLiAgICAgICAgICAgICBhcHBsaWNhYmxlX3ByaWNlcyA9IFByaWNlLm9iamVjdHMuZmlsdGVyKCpmaWx0ZXJzKQoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2xpYi9weXRob24zLjYvc2l0ZS1wYWNrYWdlcy9kamFuZ28vZGIvbW9kZWxzL21hbmFnZXIucHkiIGluIG1hbmFnZXJfbWV0aG9kCiAgODUuICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0YXR0cihzZWxmLmdldF9xdWVyeXNldCgpLCBuYW1lKSgqYXJncywgKiprd2FyZ3MpCgpGaWxlICIvVXNlcnMvanN1Z2FybWFuLy5weWVudi92ZXJzaW9ucy9sYWEtZmVlLWNhbGN1bGF0b3IvbGliL3B5dGhvbjMuNi9zaXRlLXBhY2thZ2VzL2RqYW5nby9kYi9tb2RlbHMvcXVlcnkucHkiIGluIGZpbHRlcgogIDc4NC4gICAgICAgICByZXR1cm4gc2VsZi5fZmlsdGVyX29yX2V4Y2x1ZGUoRmFsc2UsICphcmdzLCAqKmt3YXJncykKCkZpbGUgIi9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3ZlcnNpb25zL2xhYS1mZWUtY2FsY3VsYXRvci9saWIvcHl0aG9uMy42L3NpdGUtcGFja2FnZXMvZGphbmdvL2RiL21vZGVscy9xdWVyeS5weSIgaW4gX2ZpbHRlcl9vcl9leGNsdWRlCiAgODAyLiAgICAgICAgICAgICBjbG9uZS5xdWVyeS5hZGRfcShRKCphcmdzLCAqKmt3YXJncykpCgpGaWxlICIvVXNlcnMvanN1Z2FybWFuLy5weWVudi92ZXJzaW9ucy9sYWEtZmVlLWNhbGN1bGF0b3IvbGliL3B5dGhvbjMuNi9zaXRlLXBhY2thZ2VzL2RqYW5nby9kYi9tb2RlbHMvc3FsL3F1ZXJ5LnB5IiBpbiBhZGRfcQogIDEyNTAuICAgICAgICAgY2xhdXNlLCBfID0gc2VsZi5fYWRkX3EocV9vYmplY3QsIHNlbGYudXNlZF9hbGlhc2VzKQoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2xpYi9weXRob24zLjYvc2l0ZS1wYWNrYWdlcy9kamFuZ28vZGIvbW9kZWxzL3NxbC9xdWVyeS5weSIgaW4gX2FkZF9xCiAgMTI3MC4gICAgICAgICAgICAgICAgICAgICBjdXJyZW50X25lZ2F0ZWQsIGFsbG93X2pvaW5zLCBzcGxpdF9zdWJxKQoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2xpYi9weXRob24zLjYvc2l0ZS1wYWNrYWdlcy9kamFuZ28vZGIvbW9kZWxzL3NxbC9xdWVyeS5weSIgaW4gX2FkZF9xCiAgMTI3Ni4gICAgICAgICAgICAgICAgICAgICBhbGxvd19qb2lucz1hbGxvd19qb2lucywgc3BsaXRfc3VicT1zcGxpdF9zdWJxLAoKRmlsZSAiL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2xpYi9weXRob24zLjYvc2l0ZS1wYWNrYWdlcy9kamFuZ28vZGIvbW9kZWxzL3NxbC9xdWVyeS5weSIgaW4gYnVpbGRfZmlsdGVyCiAgMTIwNi4gICAgICAgICAgICAgY29uZGl0aW9uID0gbG9va3VwX2NsYXNzKGxocywgdmFsdWUpCgpGaWxlICIvVXNlcnMvanN1Z2FybWFuLy5weWVudi92ZXJzaW9ucy9sYWEtZmVlLWNhbGN1bGF0b3IvbGliL3B5dGhvbjMuNi9zaXRlLXBhY2thZ2VzL2RqYW5nby9kYi9tb2RlbHMvbG9va3Vwcy5weSIgaW4gX19pbml0X18KICAyNC4gICAgICAgICBzZWxmLnJocyA9IHNlbGYuZ2V0X3ByZXBfbG9va3VwKCkKCkZpbGUgIi9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3ZlcnNpb25zL2xhYS1mZWUtY2FsY3VsYXRvci9saWIvcHl0aG9uMy42L3NpdGUtcGFja2FnZXMvZGphbmdvL2RiL21vZGVscy9maWVsZHMvcmVsYXRlZF9sb29rdXBzLnB5IiBpbiBnZXRfcHJlcF9sb29rdXAKICAxMTIuICAgICAgICAgICAgICAgICBzZWxmLnJocyA9IHRhcmdldF9maWVsZC5nZXRfcHJlcF92YWx1ZShzZWxmLnJocykKCkZpbGUgIi9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3ZlcnNpb25zL2xhYS1mZWUtY2FsY3VsYXRvci9saWIvcHl0aG9uMy42L3NpdGUtcGFja2FnZXMvZGphbmdvL2RiL21vZGVscy9maWVsZHMvX19pbml0X18ucHkiIGluIGdldF9wcmVwX3ZhbHVlCiAgOTY2LiAgICAgICAgIHJldHVybiBpbnQodmFsdWUpCgpFeGNlcHRpb24gVHlwZTogVmFsdWVFcnJvciBhdCAvYXBpL3YxL2ZlZS1zY2hlbWVzLzEvbW9kaWZpZXItdHlwZXMvCkV4Y2VwdGlvbiBWYWx1ZTogaW52YWxpZCBsaXRlcmFsIGZvciBpbnQoKSB3aXRoIGJhc2UgMTA6ICdJTlZBTElEX0RBVEFUWVBFJwpSZXF1ZXN0IGluZm9ybWF0aW9uOgpVU0VSOiBBbm9ueW1vdXNVc2VyCgpHRVQ6CnNjZW5hcmlvID0gJ0lOVkFMSURfREFUQVRZUEUnCgpQT1NUOiBObyBQT1NUIGRhdGEKCkZJTEVTOiBObyBGSUxFUyBkYXRhCgpDT09LSUVTOiBObyBjb29raWUgZGF0YQoKTUVUQToKQUFEX1BST1RPX0NMSUVOVF9JRCA9ICcxNzRlZTM4Ni1lNzBlLTRjNzMtYmU4Yy01ODkyOTcwYmY1OTEnCkFBRF9QUk9UT19DTElFTlRfU0VDUkVUID0gJ3B0Vy95MGRyNCtoeUY4d0U4cllNRkNwTEdmb0FMQXJiY2NSOG9Xc1F1U2c9JwpBQURfUFJPVE9fVEVOQU5UX0lEID0gJzQyNGFlMWUwLTYyMjYtNGI1NC04MjgzLTg2OTliNDZhOGM5ZicKQUFEX1RFU1RfQ0xJRU5UX0lEID0gJzkyZjY1YTkyLThiYTgtNDM3Mi1iNDhiLTU3OWE1YWZmYzNlZicKQUFEX1RFU1RfQ0xJRU5UX1NFQ1JFVCA9ICdnVzZScWRJMUR3N0k3RFI1WXR3T1JuZThvMUFqbnVEWmd2dFlFNDQ2SDNRPScKQUFEX1RFU1RfVEVOQU5UX0lEID0gJzQyNGFlMWUwLTYyMjYtNGI1NC04MjgzLTg2OTliNDZhOGM5ZicKQURQX1NUQVRfUFVTSEVSX1BBU1NXT1JEID0gJzV1cGVyYmFkIScKQURQX1NUQVRfUFVTSEVSX1VTRVJOQU1FID0gJ3N1cGVyYWRtaW5AZXhhbXBsZS5jb20nCkFwcGxlX1B1YlN1Yl9Tb2NrZXRfUmVuZGVyID0gJy9wcml2YXRlL3RtcC9jb20uYXBwbGUubGF1bmNoZC50NHJrR0ZacnhtL1JlbmRlcicKQ0xJQ09MT1IgPSAnMScKQ09GRkVFX1NIT1BfSVAgPSAnMTcyLjE2LjcuMjA5JwpDT0xPUkZHQkcgPSAnMTU7MCcKQ09MT1JURVJNID0gJ3RydWVjb2xvcicKQ09NUExFVElPTl9SQVRFX0tFWSA9ICd0ajVkNGRieXl3dG5rZ3U0MjZzcnp0YXZrcnU4dHVlbWNtZXFndDhlbnJ0d2QzOHk2c2VocmUzc3ZudHdqd3A4JwpDT05URU5UX0xFTkdUSCA9ICcnCkNPTlRFTlRfVFlQRSA9ICd0ZXh0L3BsYWluJwpERUJVRyA9ICdUcnVlJwpESVNQTEFZID0gJy9wcml2YXRlL3RtcC9jb20uYXBwbGUubGF1bmNoZC5zaERDajQwdlo2L29yZy5tYWNvc2ZvcmdlLnhxdWFydHo6MCcKREpBTkdPX1NFVFRJTkdTX01PRFVMRSA9ICdmZWVfY2FsY3VsYXRvci5zZXR0aW5ncycKRURJVE9SID0gJy9BcHBsaWNhdGlvbnMvU3VibGltZVxcIFRleHQuYXBwL0NvbnRlbnRzL1NoYXJlZFN1cHBvcnQvYmluL3N1YmwgLXcnCkdBVEVXQVlfSU5URVJGQUNFID0gJ0NHSS8xLjEnCkdBX1RSQUNLSU5HX0lEID0gJ1VBLVhYWFhYLVgnCkdFTV9IT01FID0gJy9Vc2Vycy9qc3VnYXJtYW4vLnJ2bS9nZW1zL3J1YnktMi41LjEnCkdFTV9QQVRIID0gJy9Vc2Vycy9qc3VnYXJtYW4vLnJ2bS9nZW1zL3J1YnktMi41LjE6L1VzZXJzL2pzdWdhcm1hbi8ucnZtL2dlbXMvcnVieS0yLjUuMUBnbG9iYWwnCkdJVF9QUzFfU0hPV0RJUlRZU1RBVEUgPSAnMScKR09QQVRIID0gJy9Vc2Vycy9qc3VnYXJtYW4vZ28nCkhJU1RDT05UUk9MID0gJycKSE9NRSA9ICcvVXNlcnMvanN1Z2FybWFuJwpIVFRQX0FDQ0VQVCA9ICdhcHBsaWNhdGlvbi9qc29uJwpIVFRQX0FDQ0VQVF9FTkNPRElORyA9ICdnemlwO3E9MS4wLGRlZmxhdGU7cT0wLjYsaWRlbnRpdHk7cT0wLjMnCkhUVFBfSE9TVCA9ICdsb2NhbGhvc3Q6ODAwMCcKSFRUUF9VU0VSX0FHRU5UID0gJ2xhYS1mZWUtY2FsY3VsYXRvci1jbGllbnQvMC4xLjAnCklSQlJDID0gJy9Vc2Vycy9qc3VnYXJtYW4vLnJ2bS9ydWJpZXMvcnVieS0yLjUuMS8uaXJicmMnCklURVJNX09SSUdfUFMxID0gJyhsYWEtZmVlLWNhbGN1bGF0b3IpIFxcW1xcMDMzWzAxOzkxbVxcXVxcIVxcW1xcMDMzWzAxOzM0bVxcXSBcXFdcXFtcXDAzM1swMTszM21cXF0kKF9fZ2l0X3BzMSlcXFtcXDAzM1swMTszNG1cXF0gXFwkXFxbXFwwMzNbMDBtXFxdICcKSVRFUk1fUFJFVl9QUzEgPSAnXFxbXHgxYl0xMzM7RDskP1x4MDdceDFiXTEzMztBXHgwN1xcXShsYWEtZmVlLWNhbGN1bGF0b3IpIFxcW1xcMDMzWzAxOzkxbVxcXVxcIVxcW1xcMDMzWzAxOzM0bVxcXSBcXFdcXFtcXDAzM1swMTszM21cXF0kKF9fZ2l0X3BzMSlcXFtcXDAzM1swMTszNG1cXF0gXFwkXFxbXFwwMzNbMDBtXFxdIFxcW1x4MWJdMTMzO0JceDA3XFxdJwpJVEVSTV9QUk9GSUxFID0gJ0FsaWVuIEJsb29kJwpJVEVSTV9TRVNTSU9OX0lEID0gJ3cwdDBwMjpCNUQwQzAzMy1GNEVDLTQ0MEMtODc2Qy0yNTk2NzVBQThGQUMnCktFRU5fTUFTVEVSX0tFWSA9ICd4eHh4eHh4eHh4eHh4eHgnCktFRU5fUFJPSkVDVF9JRCA9ICdhYWFhYWFhYWFhYWFhYWEnCktFRU5fUkVBRF9LRVkgPSAnenp6enp6enp6enp6enp6JwpLRUVOX1dSSVRFX0tFWSA9ICd5eXl5eXl5eXl5eXl5eXknCkxBTkcgPSAnZW5fR0IuVVRGLTgnCkxPR05BTUUgPSAnanN1Z2FybWFuJwpMU0NPTE9SUyA9ICdHeEZ4Q3hEeEJ4ZWdlZGFiYWdhY2VkJwpNQVhfVE9LRU5TX1BFUl9IT1VSID0gJzgnCk1ZX1JVQllfSE9NRSA9ICcvVXNlcnMvanN1Z2FybWFuLy5ydm0vcnViaWVzL3J1YnktMi41LjEnCk5WTV9CSU4gPSAnL1VzZXJzL2pzdWdhcm1hbi8ubnZtL3ZlcnNpb25zL25vZGUvdjguMS4zL2JpbicKTlZNX0NEX0ZMQUdTID0gJycKTlZNX0RJUiA9ICcvVXNlcnMvanN1Z2FybWFuLy5udm0nClBBVEggPSAnL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvbGFhLWZlZS1jYWxjdWxhdG9yL2JpbjovdXNyL2xvY2FsL0NlbGxhci9weWVudi8xLjIuNC9saWJleGVjOi9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3NoaW1zOi9Vc2Vycy9qc3VnYXJtYW4vLnJ2bS9nZW1zL3J1YnktMi41LjEvYmluOi9Vc2Vycy9qc3VnYXJtYW4vLnJ2bS9nZW1zL3J1YnktMi41LjFAZ2xvYmFsL2JpbjovVXNlcnMvanN1Z2FybWFuLy5ydm0vcnViaWVzL3J1YnktMi41LjEvYmluOi91c3IvbG9jYWwvYmluOi91c3IvbG9jYWwvYmluOi91c3IvbG9jYWwvc2JpbjsvdXNyL2xvY2FsL2hlcm9rdS9iaW46L1VzZXJzL2pzdWdhcm1hbi8ubnZtL3ZlcnNpb25zL25vZGUvdjguMS4zL2JpbjovdXNyL2xvY2FsL29wdC9ibGFja2JveC9iaW46L3Vzci9iaW46L2JpbjovdXNyL3NiaW46L3NiaW46L3Vzci9sb2NhbC9iaW46L3Vzci9sb2NhbC9NYWNHUEcyL2Jpbjovb3B0L1gxMS9iaW46L3Vzci9sb2NhbC9naXQvYmluOi9Vc2Vycy9qc3VnYXJtYW4vYmluL2F6Oi9Vc2Vycy9qc3VnYXJtYW46L1VzZXJzL2pzdWdhcm1hbi8ucnZtL2dlbXMvcnVieS0yLjEuMUByYWlsc3R1dG9yaWFsX3JhaWxzXzRfMC9iaW46L1VzZXJzL2pzdWdhcm1hbi8ucnZtL2dlbXMvcnVieS0yLjEuMUBnbG9iYWwvYmluOi9Vc2Vycy9qc3VnYXJtYW4vLnJ2bS9ydWJpZXMvcnVieS0yLjEuMS9iaW46L3Vzci9sb2NhbC9oZXJva3UvYmluOi91c3IvbG9jYWwvYmluOi91c3IvbG9jYWwvc2JpbjovdXNyL2JpbjovYmluOi91c3Ivc2Jpbjovc2JpbjovdXNyL2xvY2FsL2dpdC9iaW46L3Vzci9sb2NhbC9NYWNHUEcyL2JpbjovVXNlcnMvanN1Z2FybWFuLy5ydm0vYmluOi9Vc2Vycy9qc3VnYXJtYW4vZ28vYmluOi9Vc2Vycy9qc3VnYXJtYW4vLnJ2bS9iaW46L1VzZXJzL2pzdWdhcm1hbi9iaW4nClBBVEhfSU5GTyA9ICcvYXBpL3YxL2ZlZS1zY2hlbWVzLzEvbW9kaWZpZXItdHlwZXMvJwpQRVJMX01CX09QVCA9ICctLWluc3RhbGxfYmFzZSAiL1VzZXJzL2pzdWdhcm1hbi9wZXJsNSInClBFUkxfTU1fT1BUID0gJ0lOU1RBTExfQkFTRT0vVXNlcnMvanN1Z2FybWFuL3Blcmw1JwpQR0RBVEEgPSAnL1VzZXJzL2pzdWdhcm1hbi9MaWJyYXJ5L0FwcGxpY2F0aW9uXFwgU3VwcG9ydC9Qb3N0Z3Jlcy92YXItOS4zJwpQUk9KRUNUX0hPTUUgPSAnL1VzZXJzL2pzdWdhcm1hbi9yYWlsc19wcm9qZWN0cy9kc193b3JrJwpQV0QgPSAnL1VzZXJzL2pzdWdhcm1hbi9yYWlsc19wcm9qZWN0cy9kc193b3JrL2NjY2QvbGFhLWZlZS1jYWxjdWxhdG9yJwpQWUVOVl9BQ1RJVkFURV9TSEVMTCA9ICcxJwpQWUVOVl9ESVIgPSAnL1VzZXJzL2pzdWdhcm1hbi9yYWlsc19wcm9qZWN0cy9kc193b3JrL2NjY2QvbGFhLWZlZS1jYWxjdWxhdG9yJwpQWUVOVl9IT09LX1BBVEggPSAnL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvcHllbnYuZDovdXNyL2xvY2FsL0NlbGxhci9weWVudi8xLjIuNC9weWVudi5kOi91c3IvbG9jYWwvZXRjL3B5ZW52LmQ6L2V0Yy9weWVudi5kOi91c3IvbGliL3B5ZW52L2hvb2tzJwpQWUVOVl9ST09UID0gJy9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52JwpQWUVOVl9TSEVMTCA9ICdiYXNoJwpQWUVOVl9WRVJTSU9OID0gJ2xhYS1mZWUtY2FsY3VsYXRvcicKUFlFTlZfVklSVFVBTF9FTlYgPSAnL1VzZXJzL2pzdWdhcm1hbi8ucHllbnYvdmVyc2lvbnMvMy42LjUvZW52cy9sYWEtZmVlLWNhbGN1bGF0b3InClFVRVJZX1NUUklORyA9ICdzY2VuYXJpbz1JTlZBTElEX0RBVEFUWVBFJwpSRU1PVEVfQUREUiA9ICcxMjcuMC4wLjEnClJFTU9URV9IT1NUID0gJycKUkVRVUVTVF9NRVRIT0QgPSAnR0VUJwpSVUJZX1ZFUlNJT04gPSAncnVieS0yLjUuMScKUlVOX01BSU4gPSAndHJ1ZScKU0NSSVBUX05BTUUgPSAnJwpTRVJWRVJfTkFNRSA9ICcxLjAuMC4xMjcuaW4tYWRkci5hcnBhJwpTRVJWRVJfUE9SVCA9ICc4MDAwJwpTRVJWRVJfUFJPVE9DT0wgPSAnSFRUUC8xLjEnClNFUlZFUl9TT0ZUV0FSRSA9ICdXU0dJU2VydmVyLzAuMicKU0hFTEwgPSAnL2Jpbi9iYXNoJwpTSExWTCA9ICcxJwpTTEFDS19XRUJIT09LX1VSTCA9ICdodHRwczovL2hvb2tzLnNsYWNrLmNvbS9zZXJ2aWNlcy9UMDJEWUVCM0EvQjdVMDhCMDRVLzNaUHI3YUZ1Uk00d0w0b0p0S01tWWVlbycKU01UUF9ET01BSU4gPSAnYWRwLmNvbScKU01UUF9QQVNTV09SRCA9ICcqKioqKioqKioqKioqJwpTTVRQX1BPUlQgPSAnNTg3JwpTTVRQX1NFUlZFUiA9ICdzbXRwLmdtYWlsLmNvbScKU01UUF9VU0VSID0gJ2pvZWwuc3VnYXJtYW5AZGlnaXRhbC5qdXN0aWNlLmdzaS5nb3YudWsnClNPVVJDRV9BTk5PVEFUSU9OX0RJUkVDVE9SSUVTID0gJ3NwZWMsZmVhdHVyZXMnClNTSF9BVVRIX1NPQ0sgPSAnL3ByaXZhdGUvdG1wL2NvbS5hcHBsZS5sYXVuY2hkLmJSSFZLaEdrbzcvTGlzdGVuZXJzJwpTU0xfT04gPSAnZmFsc2UnClNVUFBPUlRfRU1BSUwgPSAnc3VwcG9ydEBleGFtcGxlLmNvbScKVEVSTSA9ICd4dGVybS0yNTZjb2xvcicKVEVSTV9QUk9HUkFNID0gJ2lUZXJtLmFwcCcKVEVSTV9QUk9HUkFNX1ZFUlNJT04gPSAnMy4yLjBiZXRhMycKVEVSTV9TRVNTSU9OX0lEID0gJ3cwdDBwMjpCNUQwQzAzMy1GNEVDLTQ0MEMtODc2Qy0yNTk2NzVBQThGQUMnClRNUERJUiA9ICcvdmFyL2ZvbGRlcnMvN2cveGxmNHBtZHM1OHM5cnZuNjQ0Z3RtbWZ3MDAwMGduL1QvJwpUUkFOU0FDVElPTlNfQllfQ0hBTk5FTF9LRVkgPSAneTZiem5ianU0Nnlxanl2bW41enF6OWM1ajY3NXB0YnllOTcyOHEyZXk3ZWE3andhcmtnNnV0emVxa3RoNG5jeicKVFogPSAnVVRDJwpVU0VSID0gJ2pzdWdhcm1hbicKVklSVFVBTEVOVldSQVBQRVJfSE9PS19ESVIgPSAnL1VzZXJzL2pzdWdhcm1hbi8udmlydHVhbGVudnMnClZJUlRVQUxFTlZXUkFQUEVSX1BST0pFQ1RfRklMRU5BTUUgPSAnLnByb2plY3QnClZJUlRVQUxFTlZXUkFQUEVSX1BZVEhPTiA9ICcvdXNyL2Jpbi9weXRob24nClZJUlRVQUxFTlZXUkFQUEVSX1NDUklQVCA9ICcvdXNyL2xvY2FsL2Jpbi92aXJ0dWFsZW52d3JhcHBlci5zaCcKVklSVFVBTEVOVldSQVBQRVJfV09SS09OX0NEID0gJzEnClZJUlRVQUxfRU5WID0gJy9Vc2Vycy9qc3VnYXJtYW4vLnB5ZW52L3ZlcnNpb25zLzMuNi41L2VudnMvbGFhLWZlZS1jYWxjdWxhdG9yJwpXT1JLT05fSE9NRSA9ICcvVXNlcnMvanN1Z2FybWFuLy52aXJ0dWFsZW52cycKV09SS19ESVIgPSAnL1VzZXJzL2pzdWdhcm1hbi9yYWlsc19wcm9qZWN0cy9kc193b3JrJwpYUENfRkxBR1MgPSAnMHgwJwpYUENfU0VSVklDRV9OQU1FID0gJzAnCl9PTERfVklSVFVBTF9QUzEgPSAnXFxbXFwwMzNbMDE7OTFtXFxdXFwhXFxbXFwwMzNbMDE7MzRtXFxdIFxcV1xcW1xcMDMzWzAxOzMzbVxcXSQoX19naXRfcHMxKVxcW1xcMDMzWzAxOzM0bVxcXSBcXCRcXFtcXDAzM1swMG1cXF0gJwpfX0NGX1VTRVJfVEVYVF9FTkNPRElORyA9ICcweDFGNToweDA6MHgyJwpfc3lzdGVtX2FyY2ggPSAneDg2XzY0Jwpfc3lzdGVtX25hbWUgPSAnT1NYJwpfc3lzdGVtX3R5cGUgPSAnRGFyd2luJwpfc3lzdGVtX3ZlcnNpb24gPSAnMTAuMTMnCnJ2bV9iaW5fcGF0aCA9ICcvVXNlcnMvanN1Z2FybWFuLy5ydm0vYmluJwpydm1fcGF0aCA9ICcvVXNlcnMvanN1Z2FybWFuLy5ydm0nCnJ2bV9wcmVmaXggPSAnL1VzZXJzL2pzdWdhcm1hbicKcnZtX3ZlcnNpb24gPSAnMS4yOS4zIChsYXRlc3QpJwp3c2dpLmVycm9ycyA9IDxfaW8uVGV4dElPV3JhcHBlciBuYW1lPSc8c3RkZXJyPicgbW9kZT0ndycgZW5jb2Rpbmc9J1VURi04Jz4Kd3NnaS5maWxlX3dyYXBwZXIgPSAnJwp3c2dpLmlucHV0ID0gPF9pby5CdWZmZXJlZFJlYWRlciBuYW1lPTQ+CndzZ2kubXVsdGlwcm9jZXNzID0gRmFsc2UKd3NnaS5tdWx0aXRocmVhZCA9IFRydWUKd3NnaS5ydW5fb25jZSA9IEZhbHNlCndzZ2kudXJsX3NjaGVtZSA9ICdodHRwJwp3c2dpLnZlcnNpb24gPSAnKDEsIDApJwoKU2V0dGluZ3M6ClVzaW5nIHNldHRpbmdzIG1vZHVsZSBmZWVfY2FsY3VsYXRvci5zZXR0aW5ncwpBQlNPTFVURV9VUkxfT1ZFUlJJREVTID0ge30KQURNSU5TID0gW10KQUxMT1dFRF9IT1NUUyA9IFtdCkFQSV9WRVJTSU9OID0gJyoqKioqKioqKioqKioqKioqKioqJwpBUFBFTkRfU0xBU0ggPSBUcnVlCkFVVEhFTlRJQ0FUSU9OX0JBQ0tFTkRTID0gWydkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCddCkFVVEhfUEFTU1dPUkRfVkFMSURBVE9SUyA9ICcqKioqKioqKioqKioqKioqKioqKicKQVVUSF9VU0VSX01PREVMID0gJ2F1dGguVXNlcicKQVVUT0RJU0NPVkVSX0hFQUxUSENIRUNLUyA9IFRydWUKQkFTRV9ESVIgPSAnL1VzZXJzL2pzdWdhcm1hbi9yYWlsc19wcm9qZWN0cy9kc193b3JrL2NjY2QvbGFhLWZlZS1jYWxjdWxhdG9yL2ZlZV9jYWxjdWxhdG9yJwpDQUNIRVMgPSB7J2RlZmF1bHQnOiB7J0JBQ0tFTkQnOiAnZGphbmdvLmNvcmUuY2FjaGUuYmFja2VuZHMubG9jbWVtLkxvY01lbUNhY2hlJ319CkNBQ0hFX01JRERMRVdBUkVfQUxJQVMgPSAnZGVmYXVsdCcKQ0FDSEVfTUlERExFV0FSRV9LRVlfUFJFRklYID0gJyoqKioqKioqKioqKioqKioqKioqJwpDQUNIRV9NSURETEVXQVJFX1NFQ09ORFMgPSA2MDAKQ09SU19PUklHSU5fQUxMT1dfQUxMID0gVHJ1ZQpDU1JGX0NPT0tJRV9BR0UgPSAzMTQ0OTYwMApDU1JGX0NPT0tJRV9ET01BSU4gPSBOb25lCkNTUkZfQ09PS0lFX0hUVFBPTkxZID0gRmFsc2UKQ1NSRl9DT09LSUVfTkFNRSA9ICdjc3JmdG9rZW4nCkNTUkZfQ09PS0lFX1BBVEggPSAnLycKQ1NSRl9DT09LSUVfU0VDVVJFID0gRmFsc2UKQ1NSRl9GQUlMVVJFX1ZJRVcgPSAnZGphbmdvLnZpZXdzLmNzcmYuY3NyZl9mYWlsdXJlJwpDU1JGX0hFQURFUl9OQU1FID0gJ0hUVFBfWF9DU1JGVE9LRU4nCkNTUkZfVFJVU1RFRF9PUklHSU5TID0gW10KQ1NSRl9VU0VfU0VTU0lPTlMgPSBGYWxzZQpEQVRBQkFTRVMgPSB7J2RlZmF1bHQnOiB7J0VOR0lORSc6ICdkamFuZ28uZGIuYmFja2VuZHMucG9zdGdyZXNxbF9wc3ljb3BnMicsICdOQU1FJzogJ2ZlZV9jYWxjdWxhdG9yJywgJ1VTRVInOiAncG9zdGdyZXMnLCAnUEFTU1dPUkQnOiAnKioqKioqKioqKioqKioqKioqKionLCAnSE9TVCc6ICcnLCAnUE9SVCc6ICcnLCAnQVRPTUlDX1JFUVVFU1RTJzogRmFsc2UsICdBVVRPQ09NTUlUJzogVHJ1ZSwgJ0NPTk5fTUFYX0FHRSc6IDAsICdPUFRJT05TJzoge30sICdUSU1FX1pPTkUnOiBOb25lLCAnVEVTVCc6IHsnQ0hBUlNFVCc6IE5vbmUsICdDT0xMQVRJT04nOiBOb25lLCAnTkFNRSc6IE5vbmUsICdNSVJST1InOiBOb25lfX19CkRBVEFCQVNFX1JPVVRFUlMgPSBbXQpEQVRBX1VQTE9BRF9NQVhfTUVNT1JZX1NJWkUgPSAyNjIxNDQwCkRBVEFfVVBMT0FEX01BWF9OVU1CRVJfRklFTERTID0gMTAwMApEQVRFVElNRV9GT1JNQVQgPSAnTiBqLCBZLCBQJwpEQVRFVElNRV9JTlBVVF9GT1JNQVRTID0gWyclWS0lbS0lZCAlSDolTTolUycsICclWS0lbS0lZCAlSDolTTolUy4lZicsICclWS0lbS0lZCAlSDolTScsICclWS0lbS0lZCcsICclbS8lZC8lWSAlSDolTTolUycsICclbS8lZC8lWSAlSDolTTolUy4lZicsICclbS8lZC8lWSAlSDolTScsICclbS8lZC8lWScsICclbS8lZC8leSAlSDolTTolUycsICclbS8lZC8leSAlSDolTTolUy4lZicsICclbS8lZC8leSAlSDolTScsICclbS8lZC8leSddCkRBVEVfRk9STUFUID0gJ04gaiwgWScKREFURV9JTlBVVF9GT1JNQVRTID0gWyclWS0lbS0lZCcsICclbS8lZC8lWScsICclbS8lZC8leScsICclYiAlZCAlWScsICclYiAlZCwgJVknLCAnJWQgJWIgJVknLCAnJWQgJWIsICVZJywgJyVCICVkICVZJywgJyVCICVkLCAlWScsICclZCAlQiAlWScsICclZCAlQiwgJVknXQpERUJVRyA9IFRydWUKREVCVUdfUFJPUEFHQVRFX0VYQ0VQVElPTlMgPSBGYWxzZQpERUNJTUFMX1NFUEFSQVRPUiA9ICcuJwpERUZBVUxUX0NIQVJTRVQgPSAndXRmLTgnCkRFRkFVTFRfQ09OVEVOVF9UWVBFID0gJ3RleHQvaHRtbCcKREVGQVVMVF9FWENFUFRJT05fUkVQT1JURVJfRklMVEVSID0gJ2RqYW5nby52aWV3cy5kZWJ1Zy5TYWZlRXhjZXB0aW9uUmVwb3J0ZXJGaWx0ZXInCkRFRkFVTFRfRklMRV9TVE9SQUdFID0gJ2RqYW5nby5jb3JlLmZpbGVzLnN0b3JhZ2UuRmlsZVN5c3RlbVN0b3JhZ2UnCkRFRkFVTFRfRlJPTV9FTUFJTCA9ICd3ZWJtYXN0ZXJAbG9jYWxob3N0JwpERUZBVUxUX0lOREVYX1RBQkxFU1BBQ0UgPSAnJwpERUZBVUxUX1RBQkxFU1BBQ0UgPSAnJwpESVNBTExPV0VEX1VTRVJfQUdFTlRTID0gW10KRU1BSUxfQkFDS0VORCA9ICdkamFuZ28uY29yZS5tYWlsLmJhY2tlbmRzLnNtdHAuRW1haWxCYWNrZW5kJwpFTUFJTF9IT1NUID0gJ2xvY2FsaG9zdCcKRU1BSUxfSE9TVF9QQVNTV09SRCA9ICcqKioqKioqKioqKioqKioqKioqKicKRU1BSUxfSE9TVF9VU0VSID0gJycKRU1BSUxfUE9SVCA9IDI1CkVNQUlMX1NTTF9DRVJURklMRSA9IE5vbmUKRU1BSUxfU1NMX0tFWUZJTEUgPSAnKioqKioqKioqKioqKioqKioqKionCkVNQUlMX1NVQkpFQ1RfUFJFRklYID0gJ1tEamFuZ29dICcKRU1BSUxfVElNRU9VVCA9IE5vbmUKRU1BSUxfVVNFX0xPQ0FMVElNRSA9IEZhbHNlCkVNQUlMX1VTRV9TU0wgPSBGYWxzZQpFTUFJTF9VU0VfVExTID0gRmFsc2UKRklMRV9DSEFSU0VUID0gJ3V0Zi04JwpGSUxFX1VQTE9BRF9ESVJFQ1RPUllfUEVSTUlTU0lPTlMgPSBOb25lCkZJTEVfVVBMT0FEX0hBTkRMRVJTID0gWydkamFuZ28uY29yZS5maWxlcy51cGxvYWRoYW5kbGVyLk1lbW9yeUZpbGVVcGxvYWRIYW5kbGVyJywgJ2RqYW5nby5jb3JlLmZpbGVzLnVwbG9hZGhhbmRsZXIuVGVtcG9yYXJ5RmlsZVVwbG9hZEhhbmRsZXInXQpGSUxFX1VQTE9BRF9NQVhfTUVNT1JZX1NJWkUgPSAyNjIxNDQwCkZJTEVfVVBMT0FEX1BFUk1JU1NJT05TID0gTm9uZQpGSUxFX1VQTE9BRF9URU1QX0RJUiA9IE5vbmUKRklSU1RfREFZX09GX1dFRUsgPSAwCkZJWFRVUkVfRElSUyA9IFtdCkZPUkNFX1NDUklQVF9OQU1FID0gTm9uZQpGT1JNQVRfTU9EVUxFX1BBVEggPSBOb25lCkZPUk1fUkVOREVSRVIgPSAnZGphbmdvLmZvcm1zLnJlbmRlcmVycy5EamFuZ29UZW1wbGF0ZXMnCkhFQUxUSENIRUNLUyA9IFsnbW9qX2lyYXQuaGVhbHRoY2hlY2tzLmRhdGFiYXNlX2hlYWx0aGNoZWNrJ10KSUdOT1JBQkxFXzQwNF9VUkxTID0gW10KSU5TVEFMTEVEX0FQUFMgPSBbJ2RqYW5nby5jb250cmliLmFkbWluJywgJ2RqYW5nby5jb250cmliLmF1dGgnLCAnZGphbmdvLmNvbnRyaWIuY29udGVudHR5cGVzJywgJ2RqYW5nby5jb250cmliLnNlc3Npb25zJywgJ2RqYW5nby5jb250cmliLm1lc3NhZ2VzJywgJ2RqYW5nby5jb250cmliLnN0YXRpY2ZpbGVzJywgJ3Jlc3RfZnJhbWV3b3JrJywgJ3Jlc3RfZnJhbWV3b3JrX3N3YWdnZXInLCAnbW9qX2lyYXQnLCAnY29yc2hlYWRlcnMnLCAnZGphbmdvX2ZpbHRlcnMnLCAnYXBpJywgJ2NhbGN1bGF0b3InXQpJTlRFUk5BTF9JUFMgPSBbXQpMQU5HVUFHRVMgPSBbKCdhZicsICdBZnJpa2FhbnMnKSwgKCdhcicsICdBcmFiaWMnKSwgKCdhc3QnLCAnQXN0dXJpYW4nKSwgKCdheicsICdBemVyYmFpamFuaScpLCAoJ2JnJywgJ0J1bGdhcmlhbicpLCAoJ2JlJywgJ0JlbGFydXNpYW4nKSwgKCdibicsICdCZW5nYWxpJyksICgnYnInLCAnQnJldG9uJyksICgnYnMnLCAnQm9zbmlhbicpLCAoJ2NhJywgJ0NhdGFsYW4nKSwgKCdjcycsICdDemVjaCcpLCAoJ2N5JywgJ1dlbHNoJyksICgnZGEnLCAnRGFuaXNoJyksICgnZGUnLCAnR2VybWFuJyksICgnZHNiJywgJ0xvd2VyIFNvcmJpYW4nKSwgKCdlbCcsICdHcmVlaycpLCAoJ2VuJywgJ0VuZ2xpc2gnKSwgKCdlbi1hdScsICdBdXN0cmFsaWFuIEVuZ2xpc2gnKSwgKCdlbi1nYicsICdCcml0aXNoIEVuZ2xpc2gnKSwgKCdlbycsICdFc3BlcmFudG8nKSwgKCdlcycsICdTcGFuaXNoJyksICgnZXMtYXInLCAnQXJnZW50aW5pYW4gU3BhbmlzaCcpLCAoJ2VzLWNvJywgJ0NvbG9tYmlhbiBTcGFuaXNoJyksICgnZXMtbXgnLCAnTWV4aWNhbiBTcGFuaXNoJyksICgnZXMtbmknLCAnTmljYXJhZ3VhbiBTcGFuaXNoJyksICgnZXMtdmUnLCAnVmVuZXp1ZWxhbiBTcGFuaXNoJyksICgnZXQnLCAnRXN0b25pYW4nKSwgKCdldScsICdCYXNxdWUnKSwgKCdmYScsICdQZXJzaWFuJyksICgnZmknLCAnRmlubmlzaCcpLCAoJ2ZyJywgJ0ZyZW5jaCcpLCAoJ2Z5JywgJ0ZyaXNpYW4nKSwgKCdnYScsICdJcmlzaCcpLCAoJ2dkJywgJ1Njb3R0aXNoIEdhZWxpYycpLCAoJ2dsJywgJ0dhbGljaWFuJyksICgnaGUnLCAnSGVicmV3JyksICgnaGknLCAnSGluZGknKSwgKCdocicsICdDcm9hdGlhbicpLCAoJ2hzYicsICdVcHBlciBTb3JiaWFuJyksICgnaHUnLCAnSHVuZ2FyaWFuJyksICgnaWEnLCAnSW50ZXJsaW5ndWEnKSwgKCdpZCcsICdJbmRvbmVzaWFuJyksICgnaW8nLCAnSWRvJyksICgnaXMnLCAnSWNlbGFuZGljJyksICgnaXQnLCAnSXRhbGlhbicpLCAoJ2phJywgJ0phcGFuZXNlJyksICgna2EnLCAnR2VvcmdpYW4nKSwgKCdraycsICdLYXpha2gnKSwgKCdrbScsICdLaG1lcicpLCAoJ2tuJywgJ0thbm5hZGEnKSwgKCdrbycsICdLb3JlYW4nKSwgKCdsYicsICdMdXhlbWJvdXJnaXNoJyksICgnbHQnLCAnTGl0aHVhbmlhbicpLCAoJ2x2JywgJ0xhdHZpYW4nKSwgKCdtaycsICdNYWNlZG9uaWFuJyksICgnbWwnLCAnTWFsYXlhbGFtJyksICgnbW4nLCAnTW9uZ29saWFuJyksICgnbXInLCAnTWFyYXRoaScpLCAoJ215JywgJ0J1cm1lc2UnKSwgKCduYicsICdOb3J3ZWdpYW4gQm9rbcOlbCcpLCAoJ25lJywgJ05lcGFsaScpLCAoJ25sJywgJ0R1dGNoJyksICgnbm4nLCAnTm9yd2VnaWFuIE55bm9yc2snKSwgKCdvcycsICdPc3NldGljJyksICgncGEnLCAnUHVuamFiaScpLCAoJ3BsJywgJ1BvbGlzaCcpLCAoJ3B0JywgJ1BvcnR1Z3Vlc2UnKSwgKCdwdC1icicsICdCcmF6aWxpYW4gUG9ydHVndWVzZScpLCAoJ3JvJywgJ1JvbWFuaWFuJyksICgncnUnLCAnUnVzc2lhbicpLCAoJ3NrJywgJ1Nsb3ZhaycpLCAoJ3NsJywgJ1Nsb3ZlbmlhbicpLCAoJ3NxJywgJ0FsYmFuaWFuJyksICgnc3InLCAnU2VyYmlhbicpLCAoJ3NyLWxhdG4nLCAnU2VyYmlhbiBMYXRpbicpLCAoJ3N2JywgJ1N3ZWRpc2gnKSwgKCdzdycsICdTd2FoaWxpJyksICgndGEnLCAnVGFtaWwnKSwgKCd0ZScsICdUZWx1Z3UnKSwgKCd0aCcsICdUaGFpJyksICgndHInLCAnVHVya2lzaCcpLCAoJ3R0JywgJ1RhdGFyJyksICgndWRtJywgJ1VkbXVydCcpLCAoJ3VrJywgJ1VrcmFpbmlhbicpLCAoJ3VyJywgJ1VyZHUnKSwgKCd2aScsICdWaWV0bmFtZXNlJyksICgnemgtaGFucycsICdTaW1wbGlmaWVkIENoaW5lc2UnKSwgKCd6aC1oYW50JywgJ1RyYWRpdGlvbmFsIENoaW5lc2UnKV0KTEFOR1VBR0VTX0JJREkgPSBbJ2hlJywgJ2FyJywgJ2ZhJywgJ3VyJ10KTEFOR1VBR0VfQ09ERSA9ICdlbi11cycKTEFOR1VBR0VfQ09PS0lFX0FHRSA9IE5vbmUKTEFOR1VBR0VfQ09PS0lFX0RPTUFJTiA9IE5vbmUKTEFOR1VBR0VfQ09PS0lFX05BTUUgPSAnZGphbmdvX2xhbmd1YWdlJwpMQU5HVUFHRV9DT09LSUVfUEFUSCA9ICcvJwpMT0NBTEVfUEFUSFMgPSBbXQpMT0dHSU5HID0geyd2ZXJzaW9uJzogMSwgJ2Rpc2FibGVfZXhpc3RpbmdfbG9nZ2Vycyc6IEZhbHNlLCAnZm9ybWF0dGVycyc6IHsnc2ltcGxlJzogeydmb3JtYXQnOiAnJShhc2N0aW1lKXMgWyUobGV2ZWxuYW1lKXNdICUobWVzc2FnZSlzJywgJ2RhdGVmbXQnOiAnJVktJW0tJWRUJUg6JU06JVMnfX0sICdoYW5kbGVycyc6IHsnbnVsbCc6IHsnbGV2ZWwnOiAnREVCVUcnLCAnY2xhc3MnOiAnbG9nZ2luZy5OdWxsSGFuZGxlcid9LCAnY29uc29sZSc6IHsnbGV2ZWwnOiAnREVCVUcnLCAnY2xhc3MnOiAnbG9nZ2luZy5TdHJlYW1IYW5kbGVyJywgJ2Zvcm1hdHRlcic6ICdzaW1wbGUnfSwgJ21haWxfYWRtaW5zJzogeydsZXZlbCc6ICdFUlJPUicsICdjbGFzcyc6ICdkamFuZ28udXRpbHMubG9nLkFkbWluRW1haWxIYW5kbGVyJ319LCAncm9vdCc6IHsnbGV2ZWwnOiAnV0FSTklORycsICdoYW5kbGVycyc6IFsnY29uc29sZSddfSwgJ2xvZ2dlcnMnOiB7J2xhYS1jYWxjJzogeydsZXZlbCc6ICdJTkZPJywgJ2hhbmRsZXJzJzogWydjb25zb2xlJ10sICdwcm9wYWdhdGUnOiBGYWxzZX19fQpMT0dHSU5HX0NPTkZJRyA9ICdsb2dnaW5nLmNvbmZpZy5kaWN0Q29uZmlnJwpMT0dJTl9SRURJUkVDVF9VUkwgPSAnL2FjY291bnRzL3Byb2ZpbGUvJwpMT0dJTl9VUkwgPSAnL2FjY291bnRzL2xvZ2luLycKTE9HT1VUX1JFRElSRUNUX1VSTCA9IE5vbmUKTUFOQUdFUlMgPSBbXQpNRURJQV9ST09UID0gJycKTUVESUFfVVJMID0gJycKTUVTU0FHRV9TVE9SQUdFID0gJ2RqYW5nby5jb250cmliLm1lc3NhZ2VzLnN0b3JhZ2UuZmFsbGJhY2suRmFsbGJhY2tTdG9yYWdlJwpNSURETEVXQVJFID0gWydkamFuZ28ubWlkZGxld2FyZS5zZWN1cml0eS5TZWN1cml0eU1pZGRsZXdhcmUnLCAnZGphbmdvLmNvbnRyaWIuc2Vzc2lvbnMubWlkZGxld2FyZS5TZXNzaW9uTWlkZGxld2FyZScsICdjb3JzaGVhZGVycy5taWRkbGV3YXJlLkNvcnNNaWRkbGV3YXJlJywgJ2RqYW5nby5taWRkbGV3YXJlLmNvbW1vbi5Db21tb25NaWRkbGV3YXJlJywgJ2RqYW5nby5taWRkbGV3YXJlLmNzcmYuQ3NyZlZpZXdNaWRkbGV3YXJlJywgJ2RqYW5nby5jb250cmliLmF1dGgubWlkZGxld2FyZS5BdXRoZW50aWNhdGlvbk1pZGRsZXdhcmUnLCAnZGphbmdvLmNvbnRyaWIubWVzc2FnZXMubWlkZGxld2FyZS5NZXNzYWdlTWlkZGxld2FyZScsICdkamFuZ28ubWlkZGxld2FyZS5jbGlja2phY2tpbmcuWEZyYW1lT3B0aW9uc01pZGRsZXdhcmUnXQpNSURETEVXQVJFX0NMQVNTRVMgPSBbJ2RqYW5nby5taWRkbGV3YXJlLmNvbW1vbi5Db21tb25NaWRkbGV3YXJlJywgJ2RqYW5nby5taWRkbGV3YXJlLmNzcmYuQ3NyZlZpZXdNaWRkbGV3YXJlJ10KTUlHUkFUSU9OX01PRFVMRVMgPSB7fQpNT05USF9EQVlfRk9STUFUID0gJ0YgaicKTlVNQkVSX0dST1VQSU5HID0gMApQQVNTV09SRF9IQVNIRVJTID0gJyoqKioqKioqKioqKioqKioqKioqJwpQQVNTV09SRF9SRVNFVF9USU1FT1VUX0RBWVMgPSAnKioqKioqKioqKioqKioqKioqKionClBJTkdfSlNPTl9LRVlTID0gJyoqKioqKioqKioqKioqKioqKioqJwpQUkVQRU5EX1dXVyA9IEZhbHNlClJFU1RfRlJBTUVXT1JLID0geydERUZBVUxUX1BBR0lOQVRJT05fQ0xBU1MnOiAncmVzdF9mcmFtZXdvcmsucGFnaW5hdGlvbi5QYWdlTnVtYmVyUGFnaW5hdGlvbicsICdQQUdFX1NJWkUnOiAxMDB9ClJPT1RfVVJMQ09ORiA9ICdmZWVfY2FsY3VsYXRvci51cmxzJwpTRUNSRVRfS0VZID0gJyoqKioqKioqKioqKioqKioqKioqJwpTRUNVUkVfQlJPV1NFUl9YU1NfRklMVEVSID0gRmFsc2UKU0VDVVJFX0NPTlRFTlRfVFlQRV9OT1NOSUZGID0gRmFsc2UKU0VDVVJFX0hTVFNfSU5DTFVERV9TVUJET01BSU5TID0gRmFsc2UKU0VDVVJFX0hTVFNfUFJFTE9BRCA9IEZhbHNlClNFQ1VSRV9IU1RTX1NFQ09ORFMgPSAwClNFQ1VSRV9QUk9YWV9TU0xfSEVBREVSID0gTm9uZQpTRUNVUkVfUkVESVJFQ1RfRVhFTVBUID0gW10KU0VDVVJFX1NTTF9IT1NUID0gTm9uZQpTRUNVUkVfU1NMX1JFRElSRUNUID0gRmFsc2UKU0VSVkVSX0VNQUlMID0gJ3Jvb3RAbG9jYWxob3N0JwpTRVNTSU9OX0NBQ0hFX0FMSUFTID0gJ2RlZmF1bHQnClNFU1NJT05fQ09PS0lFX0FHRSA9IDEyMDk2MDAKU0VTU0lPTl9DT09LSUVfRE9NQUlOID0gTm9uZQpTRVNTSU9OX0NPT0tJRV9IVFRQT05MWSA9IFRydWUKU0VTU0lPTl9DT09LSUVfTkFNRSA9ICdzZXNzaW9uaWQnClNFU1NJT05fQ09PS0lFX1BBVEggPSAnLycKU0VTU0lPTl9DT09LSUVfU0VDVVJFID0gRmFsc2UKU0VTU0lPTl9FTkdJTkUgPSAnZGphbmdvLmNvbnRyaWIuc2Vzc2lvbnMuYmFja2VuZHMuZGInClNFU1NJT05fRVhQSVJFX0FUX0JST1dTRVJfQ0xPU0UgPSBGYWxzZQpTRVNTSU9OX0ZJTEVfUEFUSCA9IE5vbmUKU0VTU0lPTl9TQVZFX0VWRVJZX1JFUVVFU1QgPSBGYWxzZQpTRVNTSU9OX1NFUklBTElaRVIgPSAnZGphbmdvLmNvbnRyaWIuc2Vzc2lvbnMuc2VyaWFsaXplcnMuSlNPTlNlcmlhbGl6ZXInClNFVFRJTkdTX01PRFVMRSA9ICdmZWVfY2FsY3VsYXRvci5zZXR0aW5ncycKU0hPUlRfREFURVRJTUVfRk9STUFUID0gJ20vZC9ZIFAnClNIT1JUX0RBVEVfRk9STUFUID0gJ20vZC9ZJwpTSUdOSU5HX0JBQ0tFTkQgPSAnZGphbmdvLmNvcmUuc2lnbmluZy5UaW1lc3RhbXBTaWduZXInClNJTEVOQ0VEX1NZU1RFTV9DSEVDS1MgPSBbXQpTVEFUSUNGSUxFU19ESVJTID0gW10KU1RBVElDRklMRVNfRklOREVSUyA9IFsnZGphbmdvLmNvbnRyaWIuc3RhdGljZmlsZXMuZmluZGVycy5GaWxlU3lzdGVtRmluZGVyJywgJ2RqYW5nby5jb250cmliLnN0YXRpY2ZpbGVzLmZpbmRlcnMuQXBwRGlyZWN0b3JpZXNGaW5kZXInXQpTVEFUSUNGSUxFU19TVE9SQUdFID0gJ2RqYW5nby5jb250cmliLnN0YXRpY2ZpbGVzLnN0b3JhZ2UuU3RhdGljRmlsZXNTdG9yYWdlJwpTVEFUSUNfUk9PVCA9ICcvVXNlcnMvanN1Z2FybWFuL3JhaWxzX3Byb2plY3RzL2RzX3dvcmsvY2NjZC9sYWEtZmVlLWNhbGN1bGF0b3IvZmVlX2NhbGN1bGF0b3Ivc3RhdGljJwpTVEFUSUNfVVJMID0gJy9zdGF0aWMvJwpTV0FHR0VSX1NFVFRJTkdTID0geydBUElTX1NPUlRFUic6ICcqKioqKioqKioqKioqKioqKioqKid9ClRFTVBMQVRFUyA9IFt7J0JBQ0tFTkQnOiAnZGphbmdvLnRlbXBsYXRlLmJhY2tlbmRzLmRqYW5nby5EamFuZ29UZW1wbGF0ZXMnLCAnRElSUyc6IFtdLCAnQVBQX0RJUlMnOiBUcnVlLCAnT1BUSU9OUyc6IHsnY29udGV4dF9wcm9jZXNzb3JzJzogWydkamFuZ28udGVtcGxhdGUuY29udGV4dF9wcm9jZXNzb3JzLmRlYnVnJywgJ2RqYW5nby50ZW1wbGF0ZS5jb250ZXh0X3Byb2Nlc3NvcnMucmVxdWVzdCcsICdkamFuZ28uY29udHJpYi5hdXRoLmNvbnRleHRfcHJvY2Vzc29ycy5hdXRoJywgJ2RqYW5nby5jb250cmliLm1lc3NhZ2VzLmNvbnRleHRfcHJvY2Vzc29ycy5tZXNzYWdlcyddfX1dClRFU1RfTk9OX1NFUklBTElaRURfQVBQUyA9IFtdClRFU1RfUlVOTkVSID0gJ2RqYW5nby50ZXN0LnJ1bm5lci5EaXNjb3ZlclJ1bm5lcicKVEhPVVNBTkRfU0VQQVJBVE9SID0gJywnClRJTUVfRk9STUFUID0gJ1AnClRJTUVfSU5QVVRfRk9STUFUUyA9IFsnJUg6JU06JVMnLCAnJUg6JU06JVMuJWYnLCAnJUg6JU0nXQpUSU1FX1pPTkUgPSAnVVRDJwpVU0VfRVRBR1MgPSBGYWxzZQpVU0VfSTE4TiA9IFRydWUKVVNFX0wxME4gPSBUcnVlClVTRV9USE9VU0FORF9TRVBBUkFUT1IgPSBGYWxzZQpVU0VfVFogPSBUcnVlClVTRV9YX0ZPUldBUkRFRF9IT1NUID0gRmFsc2UKVVNFX1hfRk9SV0FSREVEX1BPUlQgPSBGYWxzZQpXU0dJX0FQUExJQ0FUSU9OID0gJ2ZlZV9jYWxjdWxhdG9yLndzZ2kuYXBwbGljYXRpb24nClhfRlJBTUVfT1BUSU9OUyA9ICdTQU1FT1JJR0lOJwpZRUFSX01PTlRIX0ZPUk1BVCA9ICdGIFknCgoKWW91J3JlIHNlZWluZyB0aGlzIGVycm9yIGJlY2F1c2UgeW91IGhhdmUgREVCVUcgPSBUcnVlIGluIHlvdXIKRGphbmdvIHNldHRpbmdzIGZpbGUuIENoYW5nZSB0aGF0IHRvIEZhbHNlLCBhbmQgRGphbmdvIHdpbGwKZGlzcGxheSBhIHN0YW5kYXJkIHBhZ2UgZ2VuZXJhdGVkIGJ5IHRoZSBoYW5kbGVyIGZvciB0aGlzIHN0YXR1cyBjb2RlLgoK
    http_version: 
  recorded_at: Mon, 25 Jun 2018 16:10:03 GMT
- request:
    method: get
    uri: http://localhost:8000/api/v1/fee-schemes/1/modifier-types/?scenario=100
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      User-Agent:
      - laa-fee-calculator-client/0.1.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 25 Jun 2018 16:10:03 GMT
      Server:
      - WSGIServer/0.2 CPython/3.6.5
      Content-Type:
      - application/json
      Vary:
      - Accept, Cookie
      Allow:
      - GET, HEAD, OPTIONS
      X-Frame-Options:
      - SAMEORIGIN
      Content-Length:
      - '52'
    body:
      encoding: UTF-8
      string: '{"count":0,"next":null,"previous":null,"results":[]}'
    http_version: 
  recorded_at: Mon, 25 Jun 2018 16:10:03 GMT
recorded_with: VCR 4.0.0
